{
	"info": {
		"_postman_id": "1bc07f0f-f114-45d8-9618-b8592e8dc335",
		"name": "fakestore",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30794033"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const respuesta = pm.response.json();",
							"const token = respuesta.token;",
							"pm.environment.set(\"token\", token);",
							"",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.token).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Token is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.token).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"var template = `",
							"<style type=\"text/css\">",
							"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
							"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
							"    .tftable tr {background-color:#ffffff;}",
							"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
							"    .tftable tr:hover {background-color:#e0ffff;}",
							"</style>",
							"",
							"<table class=\"tftable\" border=\"1\">",
							"    <tr>",
							"        <th>Token</th>",
							"    </tr>",
							"    <tr>",
							"        <td>{{response.token}}</td>",
							"    </tr>",
							"</table>",
							"`;",
							"",
							"function constructVisualizerPayload() {",
							"    return {response: pm.response.json()}",
							"}",
							"",
							"pm.visualizer.set(template, constructVisualizerPayload());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" : \"mor_2314\",\r\n    \"password\" : \"83r5^_\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/auth/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"auth",
						"login"
					]
				},
				"description": "\nThis endpoint makes an HTTP POST request to {{url}}/auth/login to authenticate a user. The request should include a raw JSON body with the user's \"username\" and \"password\" as empty strings.\n\n### Request Body\n- username (string, required): The username of the user.\n- password (string, required): The password of the user.\n\nThe response to the request will have a status code of 200 and a content type of application/json. The response body will contain a \"token\" which can be used for further authenticated requests.\n\n### Response\n- token (string): The authentication token for the user.\n\n"
			},
			"response": []
		},
		{
			"name": "GetAllCart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Fixed the syntax and added appropriate checks for response data",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is in JSON format\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"pm.test(\"Verify that the 'id' field is present and has the correct data type\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function (cart) {",
							"        pm.expect(cart).to.have.property('id');",
							"        pm.expect(cart.id).to.be.a('number');",
							"    });",
							"});",
							"",
							"pm.test(\"Response has the required fields - id, userId, date, and products\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(cart) {",
							"        pm.expect(cart).to.have.property('id');",
							"        pm.expect(cart).to.have.property('userId');",
							"        pm.expect(cart).to.have.property('date');",
							"        pm.expect(cart).to.have.property('products');",
							"    });",
							"});",
							"",
							"pm.test(\"Date is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(cart) {",
							"        pm.expect(cart.date).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
							"    });",
							"});",
							"",
							"pm.test(\"Products array contains the expected fields - productId and quantity\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(cart) {",
							"        pm.expect(cart.products).to.be.an('array');",
							"        cart.products.forEach(function(product) {",
							"            pm.expect(product).to.be.an('object');",
							"            pm.expect(product.productId).to.exist;",
							"            pm.expect(product.quantity).to.exist;",
							"        });",
							"    });",
							"});",
							"",
							"pm.test(\"Verify the '__v' field is present and has the correct data type\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(cart) {",
							"        pm.expect(cart.__v).to.exist;",
							"        pm.expect(cart.__v).to.be.a('number');",
							"    });",
							"});",
							"",
							"pm.test(\"UserId field is present and has the correct data type\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(cart) {",
							"        pm.expect(cart.userId).to.exist;",
							"        pm.expect(cart.userId).to.be.a('number');",
							"    });",
							"});",
							"var template = `",
							"<style type=\"text/css\">",
							"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
							"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
							"    .tftable tr {background-color:#ffffff;}",
							"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
							"    .tftable tr:hover {background-color:#e0ffff;}",
							"</style>",
							"",
							"<table class=\"tftable\" border=\"1\">",
							"    <tr>",
							"        <th>ID</th>",
							"        <th>User ID</th>",
							"        <th>Date</th>",
							"        <th>Products</th>",
							"        <th>__v</th>",
							"    </tr>",
							"    ",
							"    {{#each response}}",
							"        <tr>",
							"            <td>{{id}}</td>",
							"            <td>{{userId}}</td>",
							"            <td>{{date}}</td>",
							"            <td>",
							"                <table>",
							"                    <tr>",
							"                        <th>Product ID</th>",
							"                        <th>Quantity</th>",
							"                    </tr>",
							"                    {{#each products}}",
							"                        <tr>",
							"                            <td>{{productId}}</td>",
							"                            <td>{{quantity}}</td>",
							"                        </tr>",
							"                    {{/each}}",
							"                </table>",
							"            </td>",
							"            <td>{{__v}}</td>",
							"        </tr>",
							"    {{/each}}",
							"</table>",
							"`;",
							"",
							"function constructVisualizerPayload() {",
							"    return {response: pm.response.json()}",
							"}",
							"",
							"pm.visualizer.set(template, constructVisualizerPayload());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/carts",
					"host": [
						"{{url}}"
					],
					"path": [
						"carts"
					]
				},
				"description": "\n  \n# Get Carts\n\nThis endpoint retrieves the list of carts.\n\n## Response\n\nUpon a successful request, the server will respond with a status code of 200 and a JSON array containing cart objects. Each cart object includes an `id`, `userId`, `date`, an array of `products` with their `productId` and `quantity`, and a `__v` field.\n\nExample response:\n```json\n[\n    {\n        \"id\": 0,\n        \"userId\": 0,\n        \"date\": \"\",\n        \"products\": [\n            {\n                \"productId\": 0,\n                \"quantity\": 0\n            }\n        ],\n        \"__v\": 0\n    }\n]\n```\n"
			},
			"response": []
		},
		{
			"name": "AddNewCart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('userId');",
							"    pm.expect(responseData).to.have.property('date');",
							"    pm.expect(responseData).to.have.property('products');",
							"});",
							"",
							"",
							"pm.test(\"Validate that 'id' is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.id).to.be.at.least(0, \"Value should be non-negative\");",
							"});",
							"",
							"pm.test(\"Verify that the 'date' is in a valid date format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/, \"Value should be in valid date format\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'products' array is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.products).to.exist.and.to.be.an('array');",
							"    pm.expect(responseData.products.length).to.be.at.least(1, \"At least one product should be present\");",
							"});",
							"var template = `",
							"<style type=\"text/css\">",
							"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
							"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
							"    .tftable tr {background-color:#ffffff;}",
							"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
							"    .tftable tr:hover {background-color:#e0ffff;}",
							"</style>",
							"",
							"<table class=\"tftable\" border=\"1\">",
							"    <tr>",
							"        <th>Product ID</th>",
							"        <th>Quantity</th>",
							"    </tr>",
							"    ",
							"    {{#each response.products}}",
							"        <tr>",
							"            <td>{{productId}}</td>",
							"            <td>{{quantity}}</td>",
							"        </tr>",
							"    {{/each}}",
							"</table>",
							"`;",
							"",
							"function constructVisualizerPayload() {",
							"    return {response: pm.response.json()}",
							"}",
							"",
							"pm.visualizer.set(template, constructVisualizerPayload());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userId\" : 5,\r\n    \"date\" : \"2020-02-03\",\r\n    \"products\" : [\r\n        {\"productId\" : 5, \"quantity\" : 1},\r\n        {\"productId\" : 1, \"quantity\" : 5}]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/carts",
					"host": [
						"{{url}}"
					],
					"path": [
						"carts"
					]
				},
				"description": "\nThis endpoint allows you to create a new cart by sending an HTTP POST request to {{url}}/carts. The request should include a payload in the raw request body type with the \"userId\" and \"date\" fields along with an array of \"products\" containing \"productId\" and \"quantity\" for each product.\n\n### Request Body\n- `userId` (number): The ID of the user associated with the cart.\n- `date` (string): The date of the cart creation.\n- `products` (array): An array of products containing the following fields for each product:\n  - `productId` (number): The ID of the product.\n  - `quantity` (number): The quantity of the product in the cart.\n\n### Response\nUpon successful execution, the endpoint returns a status code of 200 and a JSON response containing the newly created cart's \"id\", \"userId\", \"date\", and the array of \"products\" with their \"productId\" and \"quantity\".\n\nExample Response:\n```json\n{\n    \"id\": 0,\n    \"userId\": 0,\n    \"date\": \"\",\n    \"products\": [\n        {\n            \"productId\": 0,\n            \"quantity\": 0\n        }\n    ]\n}\n```\n"
			},
			"response": []
		},
		{
			"name": "GetSingleProduct",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Price is a non-negative number\", function () {",
							"    pm.expect(pm.response.json().price).to.be.a('number').and.to.be.at.least(0);",
							"});",
							"",
							"pm.test(\"Rating rate is a number between 0 and 5\", function () {",
							"    pm.expect(pm.response.json().rating.rate).to.be.a('number').and.to.be.within(0, 5);",
							"});",
							"",
							"pm.test(\"Rating object contains rate and count properties\", function () {",
							"    pm.expect(pm.response.json().rating).to.have.property('rate');",
							"    pm.expect(pm.response.json().rating).to.have.property('count');",
							"});",
							"",
							"var template = `",
							"<style type=\"text/css\">",
							"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
							"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
							"    .tftable tr {background-color:#ffffff;}",
							"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
							"    .tftable tr:hover {background-color:#e0ffff;}",
							"    .tftable img {max-width: 100px; max-height: 100px;}",
							"</style>",
							"",
							"<table class=\"tftable\" border=\"1\">",
							"    <tr>",
							"        <th>ID</th>",
							"        <th>Title</th>",
							"        <th>Price</th>",
							"        <th>Description</th>",
							"        <th>Category</th>",
							"        <th>Image</th>",
							"        <th>Rating Rate</th>",
							"        <th>Rating Count</th>",
							"    </tr>",
							"    <tr>",
							"        <td>{{response.id}}</td>",
							"        <td>{{response.title}}</td>",
							"        <td>{{response.price}}</td>",
							"        <td>{{response.description}}</td>",
							"        <td>{{response.category}}</td>",
							"        <td><img src=\"{{response.image}}\" alt=\"Product Image\"></td>",
							"        <td>{{response.rating.rate}}</td>",
							"        <td>{{response.rating.count}}</td>",
							"    </tr>",
							"</table>",
							"`;",
							"",
							"function constructVisualizerPayload() {",
							"    return { response: pm.response.json() }",
							"}",
							"",
							"pm.visualizer.set(template, constructVisualizerPayload());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/products/:id",
					"host": [
						"{{url}}"
					],
					"path": [
						"products",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "1"
						}
					]
				}
			},
			"response": []
		}
	]
}